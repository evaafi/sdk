import { Cell, Dictionary } from "@ton/core"
import { BackendPriceSource, DefaultPriceSourcesConfig, generatePriceSources, getPrices, MAINNET_POOL_CONFIG, PriceData, Prices, PricesCollector, PriceSourcesConfig, RawPriceData, STTON_MAINNET, TON_MAINNET, USDT_MAINNET } from "../../src"
import { ORACLES_MAINNET } from "../../src/constants/general"

describe('PriceCollector tests', () => {
    test('test default price sources', async () => {
        expect.assertions(3);

        const collector = new PricesCollector(MAINNET_POOL_CONFIG);
        let prices: Prices = new Prices(Dictionary.empty(), Cell.EMPTY);
        try {
            prices = await collector.getPrices();
            expect(true).toEqual(true);
        } catch (error) {
            expect(error).toBeUndefined();
            return;
        }
    
        expect(prices.dict.values().length).toBeGreaterThan(4);
        expect(prices.dataCell).not.toEqual(Cell.EMPTY);
    });

    test('test backend price source', async () => {
        const priceSources = generatePriceSources(DefaultPriceSourcesConfig);
        expect.assertions(1);

        for (const source of priceSources) {
            if (source.sourceName == 'BackendPriceSource') {
                const prices = await source.getPrices();
                expect(prices.length).toBeGreaterThan(3);
            }
        }
    });

    test('test icp price source', async () => {
        const priceSources = generatePriceSources(DefaultPriceSourcesConfig);
        expect.assertions(1);

        for (const source of priceSources) {
            if (source.sourceName == 'IcpPriceSource') {
                const prices = await source.getPrices();
                expect(prices.length).toBeGreaterThan(3);
            }
        }
    });

    class FakeBackendPriceSource extends BackendPriceSource {
        protected priceSourceName: string = 'FakeBackendPriceSource';
    
        async getPrices(): Promise<RawPriceData[]> {
            const oldPrices = [
                { oracleId: 0, data: "0x7b22737461747573223a226f6b222c2274696d657374616d70223a313733313033393230392c227061636b6564507269636573223ac227369676e6174757265223a226363366562383666353862623236653761616266633962323833653135613238316239653431613365386339366431343732663036626363353237653865633563303539316464343136336238383766666338323364333933663565303465656636343430366266306335396437393963313935316635353631653832373033222c22617373657473223a5b223131383736393235333730383634363134343634373939303837363237313537383035303530373435333231333036343034353633313634363733383533333337393239313633313933373338222c223931363231363637393033373633303733353633353730353537363339343333343435373931353036323332363138303032363134383936393831303336363539333032383534373637323234222c223831323033353633303232353932313933383637393033383939323532373131313132383530313830363830313236333331333533383932313732323231333532313437363437323632353135222c223539363336353436313637393637313938343730313334363437303038353538303835343336303034393639303238393537393537343130333138303934323830313130303832383931373138222c223333313731353130383538333230373930323636323437383332343936393734313036393738373030313930343938383030383538333933303839343236343233373632303335343736393434222c223233313033303931373834383631333837333732313030303433383438303738353135323339353432353638373531393339393233393732373939373333373238353236303430373639373637222c22313031333835303433323836353230333030363736303439303637333539333330343338343438333733303639313337383431383731303236353632303937393739303739353430343339393034222c223730373732313936383738353634353634363431353735313739303435353834353935323939313637363735303238323430303338353938333239393832333132313832373433393431313730222c223438383339333132383635333431303530353736353436383737393935313936373631353536353831393735393935383539363936373938363031353939303330383732353736343039343839225d2c227075626c69634b6579223a2262343034663461326562623632663236323362333730633839313839373438613032373663303731393635623136343662393936343037663130643732656239227d" },
                { oracleId: 1, data: "0x7b22737461747573223a226f6b222c2274696d657374616d70223a313733313033393230322c227061636b6564507269636573223a22623565653963373234313032313230313030303139643030303130393637326438666532633030313032303132303032303930323031323030333036303230313230303430353030346462663734383433336663626363316163373565353437393866623963646664386433363862386436616533303932663463323931636638343635353930663762313461303234353237666437313030303464626636363237633565616637353065313565363839303036613138663133363133306661326236383734613632653537663963353239626334336366616534396365613032356533323639326630303230313230303730383030346462663532616364316432313063383965363036343537333266626431663535356638343365306235346135663133303565303835623538336663313639613133613061303236323861343137333030303462626635376634323439393832363837613239373461666264613533336564656132396562653463656565313333633738366631323435396338313033643937663232383931353535326535303032303132303061306630323031323030623065303230313230306330643030346262663066363435623161313434323030383431333437646436613962333863336163373931646562623738333465303362623838363233383339353936303766313930656536373032346130303034646266333164653933356536326133643430333733656531646538316338396631333261373539653039343133333731663338616234303134373935393037303063393430353431656438353965303030346262663637306632643034366333326632623139343935386162643336623763373163643131386563363335663039393063656163383633653933353066316465363638373734666162333930303230313230313031313030346262663535323030643761376636303761366162623564646666323736343937643231356635346463373934303065376665616534316631353061353932363634663038373734666162333930303034646266343034626364346165626532653962346461633461656638336663343039393935346261336338663861623864363431386366623564636164383661663663306133623865366538336462303039313333303366222c227369676e6174757265223a223066313165633230316430623034343535633233373238323036333235316564653366666630306239386162616663653032383638343535386163366564633533313037393530353639353962323965636536613635636534346135643962376538626331623366633531363238396463343264383536653963616165303033222c22617373657473223a5b223131383736393235333730383634363134343634373939303837363237313537383035303530373435333231333036343034353633313634363733383533333337393239313633313933373338222c223931363231363637393033373633303733353633353730353537363339343333343435373931353036323332363138303032363134383936393831303336363539333032383534373637323234222c223831323033353633303232353932313933383637393033383939323532373131313132383530313830363830313236333331333533383932313732323231333532313437363437323632353135222c223539363336353436313637393637313938343730313334363437303038353538303835343336303034393639303238393537393537343130333138303934323830313130303832383931373138222c223333313731353130383538333230373930323636323437383332343936393734313036393738373030313930343938383030383538333933303839343236343233373632303335343736393434222c223233313033303931373834383631333837333732313030303433383438303738353135323339353432353638373531393339393233393732373939373333373238353236303430373639373637222c22313031333835303433323836353230333030363736303439303637333539333330343338343438333733303639313337383431383731303236353632303937393739303739353430343339393034222c223730373732313936383738353634353634363431353735313739303435353834353935323939313637363735303238323430303338353938333239393832333132313832373433393431313730222c223438383339333132383635333431303530353736353436383737393935313936373631353536353831393735393935383539363936373938363031353939303330383732353736343039343839225d2c227075626c69634b6579223a2239616431313530383735323064393162366234356436613835323165623436313665653639313461663037666162646332653964313832366462623137303738227d" },
                { oracleId: 2, data: "0x7b22737461747573223a226f6b222c2274696d657374616d70223a313733313033393139382c227061636b6564507269636573223ac227369676e6174757265223a223532366332633664653430336563636237313432313936363737663135663531636664323033363333303666346130383031643861386639666536643063616231633465613532376131366363386231343632306139313464363136303132393032633337303831323532336637363666663931666664363161386236373031222c22617373657473223a5b223131383736393235333730383634363134343634373939303837363237313537383035303530373435333231333036343034353633313634363733383533333337393239313633313933373338222c223931363231363637393033373633303733353633353730353537363339343333343435373931353036323332363138303032363134383936393831303336363539333032383534373637323234222c223831323033353633303232353932313933383637393033383939323532373131313132383530313830363830313236333331333533383932313732323231333532313437363437323632353135222c223539363336353436313637393637313938343730313334363437303038353538303835343336303034393639303238393537393537343130333138303934323830313130303832383931373138222c223333313731353130383538333230373930323636323437383332343936393734313036393738373030313930343938383030383538333933303839343236343233373632303335343736393434222c223233313033303931373834383631333837333732313030303433383438303738353135323339353432353638373531393339393233393732373939373333373238353236303430373639373637222c22313031333835303433323836353230333030363736303439303637333539333330343338343438333733303639313337383431383731303236353632303937393739303739353430343339393034222c223730373732313936383738353634353634363431353735313739303435353834353935323939313637363735303238323430303338353938333239393832333132313832373433393431313730222c223438383339333132383635333431303530353736353436383737393935313936373631353536353831393735393935383539363936373938363031353939303330383732353736343039343839225d2c227075626c69634b6579223a2265353033653032653861393232366233346537633964656234363363626637663139626365353839333632656234343861363961386565376232666361363331227d" },
                { oracleId: 3, data: "0x7b22737461747573223a226f6b222c2274696d657374616d70223a313733313033393230342c227061636b6564507269636573223ac227369676e6174757265223a226632633137646638386634336639366535306366366531396430373864633132356161323031333865323831353062326561356530323337396234333464396166633965373239646663633862316131633332383731383062333135373733656238623161313631376135663266646534633364656238613931376166313066222c22617373657473223a5b223131383736393235333730383634363134343634373939303837363237313537383035303530373435333231333036343034353633313634363733383533333337393239313633313933373338222c223931363231363637393033373633303733353633353730353537363339343333343435373931353036323332363138303032363134383936393831303336363539333032383534373637323234222c223831323033353633303232353932313933383637393033383939323532373131313132383530313830363830313236333331333533383932313732323231333532313437363437323632353135222c223539363336353436313637393637313938343730313334363437303038353538303835343336303034393639303238393537393537343130333138303934323830313130303832383931373138222c223333313731353130383538333230373930323636323437383332343936393734313036393738373030313930343938383030383538333933303839343236343233373632303335343736393434222c223233313033303931373834383631333837333732313030303433383438303738353135323339353432353638373531393339393233393732373939373333373238353236303430373639373637222c22313031333835303433323836353230333030363736303439303637333539333330343338343438333733303639313337383431383731303236353632303937393739303739353430343339393034222c223730373732313936383738353634353634363431353735313739303435353834353935323939313637363735303238323430303338353938333239393832333132313832373433393431313730222c223438383339333132383635333431303530353736353436383737393935313936373631353536353831393735393935383539363936373938363031353939303330383732353736343039343839225d2c227075626c69634b6579223a2239636266383337346366316632636631373131303133343837316435383031393834313665313031363833663461363166353463663261336534653332303730227d" }
             ];
            return oldPrices.map(outputData => this.parsePrices(outputData));
        }
    }

    test('test default prices but backend is old', async () => {
        expect.assertions(3);
        const sources: PriceSourcesConfig = {
            backendEndpoints: [],
            icpEndpoints: DefaultPriceSourcesConfig.icpEndpoints
        }
        const collector = new PricesCollector(MAINNET_POOL_CONFIG, sources, [new FakeBackendPriceSource("", ORACLES_MAINNET)]);
        let prices: Prices = new Prices(Dictionary.empty(), Cell.EMPTY);
        try {
            prices = await collector.getPrices();
            expect(true).toEqual(true);
        } catch (error) {
            expect(error).toBeUndefined();
            return;
        }
    
        expect(prices.dict.values().length).toBeGreaterThan(5);
        expect(prices.dataCell).not.toEqual(Cell.EMPTY);
    });

    test('test old getprices', async () => {
        expect.assertions(3);
        let prices: PriceData = { dict: Dictionary.empty(), dataCell: Cell.EMPTY };
        try {
            prices = await getPrices();
            expect(true).toEqual(true);
        } catch (error) {
            expect(error).toBeUndefined();
            return;
        }
    
        expect(prices.dict.values().length).toBeGreaterThan(5);
        expect(prices.dataCell).not.toEqual(Cell.EMPTY);
    });

    test('test getPricesForwithdraw withdraw without debt', async () => {
        expect.assertions(2);
        
        const pc = new PricesCollector()
        
        const principals = Dictionary.empty<bigint, bigint>();
        principals.set(TON_MAINNET.assetId, 1n);
        
        const prices = await pc.getPricesForWithdraw(principals, TON_MAINNET);
        expect(prices.dataCell.hash()).toEqual(Cell.EMPTY.hash());
        expect(prices.dict.size).toEqual(0);
    });

    test('test getPricesForwithdraw withdraw with 2 supplies', async () => {
        expect.assertions(2);
        
        const pc = new PricesCollector()
        
        const principals = Dictionary.empty<bigint, bigint>();
        principals.set(TON_MAINNET.assetId, 5n);
        principals.set(USDT_MAINNET.assetId, 5n);
        
        const prices = await pc.getPricesForWithdraw(principals, USDT_MAINNET);
        expect(prices.dict.values().length).toEqual(0);
        expect(prices.dataCell.hash()).toEqual(Cell.EMPTY.hash());
    });

    test('test getPricesForwithdraw withdraw with 2 supplies collateralToDebtMode', async () => {
        expect.assertions(3);
        
        const pc = new PricesCollector()
        
        const principals = Dictionary.empty<bigint, bigint>();
        principals.set(TON_MAINNET.assetId, 5n);
        principals.set(USDT_MAINNET.assetId, 5n);
        
        const prices = await pc.getPricesForWithdraw(principals, USDT_MAINNET, true);
        expect(prices.dict.values().length).toEqual(2);
        expect(prices.dataCell.hash()).not.toEqual(Cell.EMPTY.hash());
        expect(prices.dict.keys()).toEqual([TON_MAINNET.assetId, USDT_MAINNET.assetId]);
    });

    test('test getPricesForwithdraw with 2 supplies and 1 another asset withdraw', async () => {
        expect.assertions(3);
        
        const pc = new PricesCollector()
        
        const principals = Dictionary.empty<bigint, bigint>();
        principals.set(TON_MAINNET.assetId, 5n);
        principals.set(USDT_MAINNET.assetId, 5n);
        
        const prices = await pc.getPricesForWithdraw(principals, STTON_MAINNET, true);
        expect(prices.dict.values().length).toEqual(3);
        expect(prices.dataCell.hash()).not.toEqual(Cell.EMPTY.hash());
        expect(prices.dict.keys()).toEqual([TON_MAINNET.assetId, USDT_MAINNET.assetId, STTON_MAINNET.assetId]);
    });


    test('test getPricesForLiquidate ', async () => {
        expect.assertions(3);
        
        const pc = new PricesCollector()
        
        const principals = Dictionary.empty<bigint, bigint>();
        principals.set(TON_MAINNET.assetId, 5n);
        principals.set(USDT_MAINNET.assetId, -5n);
        
        const prices = await pc.getPricesForLiquidate(principals);
        expect(prices.dict.values().length).toEqual(2);
        expect(prices.dataCell.hash()).not.toEqual(Cell.EMPTY.hash());
        expect(prices.dict.keys()).toEqual([TON_MAINNET.assetId, USDT_MAINNET.assetId]);
    });
});