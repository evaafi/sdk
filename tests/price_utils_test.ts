import { Cell, Dictionary } from "@ton/core";
import { TonClient } from "@ton/ton";
import dotenv from 'dotenv';
import { Evaa, getPrices } from "../src";

let client: TonClient;
beforeAll(async () => {
    dotenv.config();
    client = new TonClient({
        endpoint: 'https://toncenter.com/api/v2/jsonRPC',
        apiKey: process.env.RPC_API_KEY,
    });
});


test('getPrices test', async () => {
  const prices = await getPrices();
  console.log(prices);
});

test('prices parsing test', async () => {
    //const data2 = '0x7b22737461747573223a226f6b222c227061636b6564507269636573223ac227369676e6174757265223a223762626662646363353537353130366162663662633437393763313034343136373463343366353932353139303533343139643763623439323032613862663862663537666132643562373836333233616430666339376138363064356264616539336265626139343633323661323833396466653563616263363839303032227d';
    //const data = JSON.parse(
    //    decodeURIComponent(data2.replace('0x', '').replace(/[0-9a-f]{2}/g, '%$&')),
    //);
    const data = {
        "status": "ok",
        "timestamp": 1722946102,
        "packedPrices": "b5ee9c7241020c0100011400010966b21236c001020120020702012003060201200405004dbf748433fcbcc1ac75e54798fb9cdfd8d368b8d6ae3092f4c291cf8465590f7b14a028b5169450004dbf6627c5eaf750e15e689006a18f136130fa2b6874a62e57f9c529bc43cfae49cea02a23141af0004dbf895668e908644f30322b997de8faaafc21f05aa52f8982f042dac1fe0b4d09d05015345cb0e8020120080b020120090a004bbf47b22d8d0a21004209a3eeb54d9c61d63c8ef5dbc1a701ddc4311c1cacb03f8c877345b810004bbf670f2d046c32f2b194958abd36b7c71cd118ec635f0990ceac863e9350f1de668774113350004bbf8a9006bd3fb03d355daeeff93b24be90afaa6e3ca0073ff5720f8a852c93327843ba0899a86a405464",
        "signature": "cb79689019b8968bd7cea4855bc7f9f9ea06674a3ced955c16878addb7dd49985760908734c2b6119df48d034a0276b4b5affa50cb2a88d6173a7716e6ba8e0b",
        "assets": [
          "11876925370864614464799087627157805050745321306404563164673853337929163193738",
          "91621667903763073563570557639433445791506232618002614896981036659302854767224",
          "81203563022592193867903899252711112850180680126331353892172221352147647262515",
          "59636546167967198470134647008558085436004969028957957410318094280110082891718",
          "33171510858320790266247832496974106978700190498800858393089426423762035476944",
          "23103091784861387372100043848078515239542568751939923972799733728526040769767"
        ],
        "publicKey": "473a72ac2bbfc14da3a77314c2cb73e755b88e7d1d6eae05ea88b4ce176a46c9"
      };
    const timestamp = Cell.fromBoc(Buffer.from(data['packedPrices'], 'hex'))[0].beginParse().loadUint(32);
    console.log('ts', timestamp)
    const pricesSlice = Cell.fromBoc(Buffer.from(data['packedPrices'], 'hex'))[0].beginParse();

    console.log('prices_slice', pricesSlice.remainingRefs);
    //console.log(Cell.fromBoc(Buffer.from(data['packedPrices'], 'hex')));
    //console.log('ref', pricesSlice.loadRef().beginParse());
    
    const dict = pricesSlice.loadRef().beginParse().loadDictDirect(Dictionary.Keys.BigUint(256), Dictionary.Values.BigVarUint(4));
    const signature = Buffer.from(data['signature'], 'hex');
    console.log(dict, signature);
});
